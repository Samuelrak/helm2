stages:
  - build
  - validate
  - deploy
  - tear_down
  - downstream
  - release

variables:
  DOCKER_REPO: samuelrak/helm
  VERSION: latest

prepare:
  stage: validate
  image: samuelrak/helm:master
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        paths:
          - '*/templates/*'
          - '*/values.yaml'
  script:
    - |
      ls
      git config --global user.name "Samuel.rak"
      git config --global user.email "Samuel.rak@kosickaakademia.sk" 
      git clone https://Samuel.rak:Sam12345rk@gitlab.kosickaakademia.sk/Samuel.Rak/helm-git
      cd helm-git
      CHARTS=("frontend" "backtours" "backauth" "databases")
      mkdir -p charts  
      for chart in "${CHARTS[@]}"; do
          mkdir -p "charts/$chart"
          helm template "$chart" ./"$chart" | tee "charts/$chart/rendered.yaml"
          git add "charts/$chart/rendered.yaml"
      done
      git fetch origin
      git pull origin main
      git commit -m "Added rendered.yaml for $chart"
      git push origin $CI_COMMIT_BRANCH
  artifacts:
    paths:
      - ../charts/

# deploy:
#   stage: deploy
#   image: samuelrak/helm:master
#   rules:
#     - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
#       variables:
#         TARGET_NS: $CI_COMMIT_REF_SLUG
#         NEW_HOST: "$CI_COMMIT_REF_SLUG.mydomain.org"
#     - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
#       variables:
#         TARGET_NS: prod
#         NEW_HOST: "www.mydomain.org"
#   script:
#     - |
#       ls
#       if [ -d frontend ]; then
#           yq e -i '.ingress.hosts[0].host="'$NEW_HOST'"' frontend/values.yaml
#         else
#           echo "Error: frontend directory not found"
#           exit 1
#         fi
#       CHARTS=("backauth" "backtours" "databases" "frontend")
#       for chart in "${CHARTS[@]}"; do
#           if [ -d $chart ]; then
#               if [ -f $chart/Chart.yaml ]; then
#                   cd ./$chart
#                   helm dependency update
#                   helm upgrade --install $chart . --namespace $TARGET_NS
#                   cd .. 
#               else
#                   echo "Error: $chart directory does not contain Chart.yaml file, skipping upgrade"
#               fi
#           else
#               echo "Error: $chart directory not found, skipping upgrade"
#           fi
#       done
#       echo $CI_COMMIT_REF_SLUG
#   environment:
#     name: $TARGET_NS
#     url: $NEW_HOST

downstream_build:
  image: samuelrak/helm:latest
  stage: downstream
  script:
    - |
      if [ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]; then
        echo "Triggering downstream build..."
        
        CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
        
        CHANGED_DIR=$(dirname $(echo "$CHANGED_FILES" | head -n 1))
        
        case "$CHANGED_DIR/" in
          "frontend/")
            COMPONENT="_FE"
            ;;
          "backend-auth/")
            COMPONENT="_BACKAUTH"
            ;;
          "backend-tours/")
            COMPONENT="_BACKTOURS"
            ;;
          "databases/")
            COMPONENT="_DB"
            ;;
          *)
            echo "Unknown folder: $CHANGED_DIR"
            exit 1
            ;;
        esac

        COMPONENT_TOKEN="${DOWNSTREAM_PROJECT_TRIGGER_TOKEN}${COMPONENT}"
        COMPONENT_ID="${COMPONENT_PROJECT_ID}${COMPONENT}"

        curl -v --request POST --form "token=${COMPONENT_TOKEN}" --form "ref=main" "https://gitlab.kosickaakademia.sk/api/v4/projects/${COMPONENT_ID}/trigger/pipeline"


      else
        echo "Not triggering downstream build as branch is not default."
      fi
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_MESSAGE =~ /(^|\W)Chart\.yaml(\W|$)/'
    
# tear_down: 
#   image: samuelrak/helm:latest1
#   stage: tear_down
#   rules:
#     - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
#       variables:
#         TARGET_NS: $CI_COMMIT_REF_SLUG
#   script:
#     - |
#       helm list --namespace $TARGET_NS 2>/dev/null || ( echo "Release not installed" && exit 0 )
#       kubectl delete ns $TARGET_NS
#   environment:
#     name: $TARGET_NS
#     action: stop    

    

release:
  stage: release
  image: samuelrak/helm:latest
  rules:
  - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    changes:
      paths:
        - Chart.yaml
  script:
    - |
      VERSION=$(cat Chart.yaml | yq '.version')
      TAG_NAME="v$VERSION"
      release-cli --private-token $PERSONAL_ACCESS_TOKEN --server-url $SERVER_URL --project-id $PROJECT_ID create --name "Release helm v$VERSION" --tag-name "v$VERSION" --ref $CI_COMMIT_SHA



